fmod PAIR{X :: TRIV, Y :: TRIV} is
  sort Pair{X, Y} .
  op <_;_> : X$Elt Y$Elt -> Pair{X, Y} .

  op 1st : Pair{X, Y} -> X$Elt .
  op 2nd : Pair{X, Y} -> Y$Elt .

  var A : X$Elt .
  var B : Y$Elt .

  eq 1st(< A ; B >) = A .
  eq 2nd(< A ; B >) = B .
  
endfm

fmod TRIPLE{X :: TRIV, Y :: TRIV, Z :: TRIV} is
  sort Triple{X, Y, Z} .
  op <_;_;_> : X$Elt Y$Elt Z$Elt -> Triple{X, Y, Z} .

  op 1st : Triple{X, Y, Z} -> X$Elt .
  op 2nd : Triple{X, Y, Z} -> Y$Elt .
  op 3rd : Triple{X, Y, Z} -> Z$Elt .

  var A : X$Elt .
  var B : Y$Elt .
  var C : Z$Elt .

  eq 1st(< A ; B ; C >) = A .
  eq 2nd(< A ; B ; C >) = B .
  eq 3rd(< A ; B ; C >) = C .
  
endfm