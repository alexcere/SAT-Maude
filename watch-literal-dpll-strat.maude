*** 
*** Strategy for solving SAT using WATCH-LITERAL-DLPP
*** inference rules. It is based on CDCL algorithm.
***

sload watch-literal-dpll
sload uip 
sload scored-heuristic

smod WATCH-LITERAL-DPLL-STRATEGY is 
    pr WATCH-LITERAL-DPLL .
    pr UNIQUE-IMPLICATION-POINT .
    pr SCORED-HEURISTIC .
    pr FLOAT .

    var F : Float .
    var l x y : Literal .
    var C C' : Clause .
    var M CTX : Context .
    var LiteralSet : ScorePairList .
    var CS : ClauseSet .
    var WC WC' : WatchedClause .
    var WCS WCS' : WatchedClauseSet .
    var Seq : WatchedSequent .
    var Seq' : BasicSequent .
    var CIS CIS' : ConflictInfoSet .

    strat watch-literal-dpll-strat :   @ BasicSequent .
    strat fail-branch : Literal Clause ConflictInfoSet ScorePairList @ WatchedSequent .
    strat propagate : Context ConflictInfoSet ClauseSet ScorePairList @ WatchedSequent .
    strat generate-failure-info : ConflictInfoSet Clause ScorePairList @ WatchedSequent .
    strat success-branch : ConflictInfoSet ScorePairList @ WatchedSequent .
    strat select-clauses : Context ConflictInfoSet ScorePairList @ WatchedSequent .
    strat decide-literal : ScorePairList @ WatchedSequent .
    strat convert-watch-literal : ScorePairList @ BasicSequent .

    sd fail-branch(l, l, CIS, LiteralSet) := 
        WBackjump2[l <- l] ; matchrew Seq s.t. (M x || WCS) := Seq /\ CTX := M x /\ y := ~(x)
        /\ CIS' := generateConflictInfoSetFromBackjump(CTX, CIS, l)
        by Seq using select-clauses(y, CIS', LiteralSet) .

    sd fail-branch(l, C, CIS, LiteralSet) :=  (WBackjump1[l <- l, C <- C] or-else 
        WBackjump2[l <- l]) ? (WLearn[C <- C] ; 
        matchrew Seq s.t. (M x || WCS) := Seq /\ CTX := M x /\ y := ~(x)
        /\ CIS' := generateConflictInfoSetFromBackjump(CTX, CIS, C) 
        by Seq using select-clauses(y, CIS', LiteralSet)) : WFail .

    sd generate-failure-info(CIS, C, LiteralSet) := matchrew Seq s.t. (M || WCS) := Seq 
        /\ CIS' :=  obtainCurrentConflictInfoSet(M, CIS)
        /\ C' :=  obtainBackjumpClause(CIS', C) /\ l := obtainNegatedUIP(CIS', C')  
        by Seq using (fail-branch(l, C', CIS, LiteralSet)) .
  
    sd propagate(l CTX, CIS, emptyCS, LiteralSet) := select-clauses(CTX, CIS, LiteralSet) .

    sd propagate(l CTX, CIS, (C, CS), LiteralSet) := 
        (matchrew Seq s.t. M || WCS, (l \/ x) : C , WCS' := Seq /\  l in M =/= true /\
        x in M =/= true /\ WC' := (l \/ x) : C /\ WC := changeRepresentative(M, l, WC') /\ 
        CIS' := (CIS x -> C) /\ y := ~(x) 
        by Seq using
        ((WUpdateClause[C <- C, WC <- WC] ; propagate(l CTX, CIS, CS, LiteralSet)) or-else 
        (WUnitPropagate[x <- x] ; propagate(l CTX y, CIS', CS, LiteralSet)) or-else 
        generate-failure-info(CIS, C, LiteralSet) )) 
        or-else propagate(l CTX, CIS, CS, LiteralSet) . 

    sd select-clauses(emptyCTX, CIS, LiteralSet) := success-branch(CIS, LiteralSet) .

    sd select-clauses(l CTX, CIS, LiteralSet) := (matchrew Seq s.t. 
        M || WCS := Seq /\ CS := obtainCandidateClauses(l, WCS) 
        by Seq using propagate(l CTX, CIS, CS, LiteralSet)) .
        
    sd decide-literal(l :| F , LiteralSet) := WDecide[l <- l] or-else decide-literal(LiteralSet) .

    sd success-branch(CIS, LiteralSet) := decide-literal(LiteralSet) ? 
        matchrew Seq s.t. (M d(l) || WCS) := Seq /\ CIS' := (CIS l -> []) 
        /\ x := ~(l) by Seq using (select-clauses(x, CIS', LiteralSet)) : idle [label suc] .

    sd convert-watch-literal(LiteralSet) := PreprocessClauseSet ; success-branch(emptyCIS, LiteralSet) .

    sd watch-literal-dpll-strat := WPureLiteral ! ; matchrew Seq' s.t. (M || CS) := Seq' /\ 
        LiteralSet := obtainInitialScoreList(CS) by Seq' using convert-watch-literal(LiteralSet) .
     
endsm