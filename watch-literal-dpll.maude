***
*** System module containing all the necessary information
*** for performing DPLL with learning and watch-literal. Note
*** that rule inference system isn't complete, so we need to
*** apply it with the proper strategies
***

sload watch-literal

mod WATCH-LITERAL-DPLL is protecting WATCH-LITERAL .

  var l x y : Literal .
  var M N CTX : Context .
  var C C' C'' : Clause .
  var CS : ClauseSet .
  var WC : WatchedClause .
  var WCS WCS' : WatchedClauseSet .
  var cond : Bool .

  *** Preprocessing: remove those clauses that contain
  *** literals that are directly satisfied as no negation appears in any
  *** other clause.
  crl [WPureLiteral] : M || (l \/ C), CS => M || CS
   if (~(l) in CS) =/= true /\ definedLiteral(l,M) =/= true .  
  

  crl [PreprocessClauseSet] : M || CS => M || WCS if WCS := preprocessWatchedLiterals(CS)  .

  crl [WUnitPropagate] :  M || WCS => M x || WCS 
    if definedLiteral(x,M) =/= true [nonexec] .

  crl [WUpdateClause] : M || WCS, C' : C , WCS' => M || WCS, WC, WCS'
    if C'' : C := WC  [nonexec] .

  crl [WDecide] : M || WCS => M d(l) || WCS
    if definedLiteral(l,M) =/= true [nonexec] .

  *** We try to jump to the lowest level possible: this level verifies that
  *** M d(x) N |= C' but M |= C' == false. If M |= C == true for M without decision
  *** literals, then we have to apply WBackjump2 rule

  crl [WBackjump1] : M d(x) N d(y) CTX || WCS => M d(x) N l || WCS
    if existsDecisionLiteral(N) =/= true /\ C' := removeLiteralFromClause(l, C)
      /\ M d(x) N |= C' == false /\ M |= C' =/= false [nonexec]  .

  *** Case we jump to first level

  crl [WBackjump2] : M d(x) N || WCS => M l || WCS if existsDecisionLiteral(M) =/= true [nonexec] .

  crl [WFail] : M || WCS => failState if existsDecisionLiteral(M) =/= true .

  crl [WLearn] : M || WCS => M || WC , WCS
    if WC := obtainValidWatchedLiterals(C, M) [nonexec] .
  
  rl [WForget] : M || WCS, WC, WCS' => M || WCS, WCS' .

  crl [WRestart] : M d(l) N || WCS => M || WCS if existsDecisionLiteral(M) =/= true .

  *** Rule for deleting several clauses at the same time

  rl [WChangeWatchedClauseSet] : M || WCS => M || WCS' [nonexec] .

endm