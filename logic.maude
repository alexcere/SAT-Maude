***
*** Basic logic declarations and auxiliar operators.
***

fmod LOGIC is
    
	protecting QID .
	protecting FLOAT .
	protecting NAT .

	*** Logic hierarchy.
	sorts Literal Context Clause ClauseSet BasicSequent Sequent .
	
	subsorts Qid < Literal < Context Clause < ClauseSet .
	subsort BasicSequent < Sequent .

	op emptyCTX : -> Context .
	op emptyCS : -> ClauseSet .
	op failState : -> Sequent .
	op [] : -> Clause .
	
	*** d is used to remark a decision literal
	op d : Literal -> Literal [ctor] .

	*** ~ is used for literal negation
	op ~ : Literal -> Literal [ctor] .
	
	op __ : Context Context -> Context [ctor assoc id: emptyCTX prec 30] .
	op _,_ : ClauseSet ClauseSet -> ClauseSet [ctor assoc comm id: emptyCS prec 30] .
	op _\/_ : Clause Clause -> Clause [ctor assoc comm id: ([]) prec 20] .
	
	op _||_ : Context ClauseSet -> BasicSequent [ctor] .

	var p : Qid .
	var l u : Literal .
	var CTX M N : Context .
	var C C' : Clause .
	var CS : ClauseSet .

    *** Equation for simplifying double negation
	eq ~(~(l)) = l .
	eq d(d(l)) = d(l) .
	eq ~(d(l)) = d(~(l)) .

	op _in_ : Literal ClauseSet -> [Bool] .
	
	eq l in (l \/ C), CS = true .
	eq d(l) in (l \/ C), CS = true .

	op _in_ : Literal Context -> [Bool] .

	eq l in M l N = true .
	eq l in M d(l) N = true .

	eq [contraction] : C,C = C .
	eq l \/ l \/ C = l \/ C .

	*** Size of a clause
	op csize : Clause -> Nat .

	eq csize([]) = 0 .
	eq csize(l \/ C) = 1 + csize(C) .

	*** Size of a set of clauses

	op cssize : ClauseSet -> Nat .

	eq cssize(emptyCS) = 0 .
	eq cssize(C, CS) = 1 + cssize(CS) .

	*** Size of context

	op ctxsize : Context -> Nat .

	eq ctxsize(emptyCTX) = 0 .
	eq ctxsize(M l) = 1 + ctxsize(M) .
	

	*** Entailment operator returns true if a literal from
	*** the context belongs to the clause, false if all literals
	*** from the clause appear negated in the context. Otherwise,
	*** the returned value belongs to the kind of Bool .
	op _|=_ : Context Clause -> [Bool] .
	
	eq CTX |= [] = false .
	eq M l N |= l \/ C = true .
	eq M d(l) N |= l \/ C = true .
	eq M ~(l) N |= l \/ C = M N |= C .
	eq M l N |= ~(l) \/ C = M N |= C .
	eq M d(~(l)) N |= l \/ C = M N |= C .
	eq M d(l) N |= ~(l) \/ C = M N |= C .

	*** A literal z is defined in a context
	*** if z or ~z appear in the context 
	op definedLiteral : Literal Context -> [Bool] .

	eq definedLiteral(l, (M l CTX)) = true .
	eq definedLiteral(l, (M ~(l) CTX)) = true .
	eq definedLiteral(~(l), (M l CTX)) = true .
	eq definedLiteral(l, (M d(~(l)) CTX)) = true .
	eq definedLiteral(~(l), (M d(l) CTX)) = true .
	eq definedLiteral(l, (M d(l) CTX)) = true .

	*** A decision literal exists in a Context
	*** if there is some literal of the form d(l)
	op existsDecisionLiteral : Context -> [Bool] .

	eq existsDecisionLiteral(M d(l) N) = true .

	*** Remove a literal that belongs to a clause.
	op removeLiteralFromClause : Literal Clause -> Clause .

	eq removeLiteralFromClause(l, l \/ C) = C .

	*** Given a literal, returns its associated
	*** variable i.e non-negated
	op literalToVariable : Literal -> Literal .

	eq literalToVariable(~(l)) = l .
	eq literalToVariable(l) = l [owise] .

	*** Given a clause that contain several literals, we obtain
  	*** its representation with variables instead: we change each negated
  	*** literal ~l for l
  	op obtainVariablesInClause : Clause -> Clause .

  	eq obtainVariablesInClause([]) = [] .
	eq obtainVariablesInClause(l \/ C) = literalToVariable(l) \/ obtainVariablesInClause(C) .

	*** Given a clause set, we obtain its variable representation.
	op obtainVariablesInClauseSet : ClauseSet -> ClauseSet .

	eq obtainVariablesInClauseSet(emptyCS) = emptyCS .
	eq obtainVariablesInClauseSet(C,CS) = obtainVariablesInClause(C) , obtainVariablesInClauseSet(CS) .
    
	*** Count how many literals there are in a clause
	op countLiteralsInClauseSet : Clause -> Nat .

	eq countLiteralsInClauseSet(emptyCS) = 0 .

	*** We first remove duplicates
	eq countLiteralsInClauseSet(l \/ C, l \/ C', CS) = countLiteralsInClauseSet(l \/ C, C', CS) .

	*** If no duplicates are found, we measure the size of each clause
	eq countLiteralsInClauseSet(C, CS) = csize(C) + countLiteralsInClauseSet(CS) [owise] .

    *** Count how many variables there are in a clause
	op countVariablesInClauseSet : ClauseSet -> Nat .

	eq countVariablesInClauseSet(CS) = countLiteralsInClauseSet(obtainVariablesInClauseSet(CS)) .
	
endfm
