***
*** Strategy that emulates Berkmin SAT Solver.
***

sload watch-literal-dpll
sload berkmin-heuristic
sload scored-heuristic

smod BERKMIN-STRATEGY is 
    pr WATCH-LITERAL-DPLL .
    pr UNIQUE-IMPLICATION-POINT .
    pr BERKMIN-HEURISTIC .
    pr FLOAT .
    pr NAT .

    var NRestart NLiterals : Nat .
    var F : Float .
    var l x y : Literal .
    var C C' BackjumpClause ConflictClause : Clause .
    var M CTX : Context .
    var BI BI' : BerkminInfo .
    var CS : ClauseSet .
    var WC WC' : WatchedClause .
    var WCS WCS' : WatchedClauseSet .
    var WatchedSeq : WatchedSequent .
    var BasicSeq : BasicSequent .
    var CIS CIS' : ConflictInfoSet .
    var RestartInfo : Pair{WatchedClauseSet, BerkminInfo} .

    strat berkmin-strat :   @ BasicSequent .
    strat fail-branch : Literal Clause Clause ConflictInfoSet BerkminInfo Nat @ WatchedSequent .
    strat propagate : Context ConflictInfoSet ClauseSet BerkminInfo Nat @ WatchedSequent .
    strat generate-failure-info : ConflictInfoSet Clause BerkminInfo Nat @ WatchedSequent .
    strat success-decision : ConflictInfoSet BerkminInfo Nat @ WatchedSequent .
    strat select-clauses : Context ConflictInfoSet BerkminInfo Nat  @ WatchedSequent .
    strat decide-literal : ConflictInfoSet BerkminInfo Nat  @ WatchedSequent .
    strat convert-watch-literal : BerkminInfo  @ BasicSequent .
    strat decide-if-restart : Literal ConflictInfoSet BerkminInfo Nat @ WatchedSequent .

    
    sd decide-if-restart(l, CIS, BI, 150) := 
        WRestart ; matchrew WatchedSeq s.t. (M || WCS) := WatchedSeq /\ RestartInfo := restartTree(BI, M, WCS) /\
        WCS' := 1st(RestartInfo) /\ BI' := 2nd(RestartInfo) /\
        CIS' := generateConflictInfoSetFromBackjump(M, CIS, l) by WatchedSeq using 
        ( WChangeWatchedClauseSet[WCS' <- WCS'] ; decide-literal(CIS', BI', 1) ) .

    csd decide-if-restart(l, CIS, BI, NRestart) := 
        select-clauses(l, CIS, BI, NRestart + 1) 
        if NRestart < 150 .


    *** Case backjump clause has only one literal: instead of learning it, 
    *** we just apply rule wbackjump2, that places that literal at level 0, so it won't
    *** be modified ever (even if we restart). Then we update CIS and BI, this last one using
    *** a different function, as we don't have to count that we have learnt a clause. Besides,
    *** we don't add one to NRestart, as we don't consider this to be a learnt clause.
    sd fail-branch(l, l, ConflictClause, CIS, BI, NRestart) := 
        WBackjump2[l <- l] ? matchrew WatchedSeq s.t. (M x || WCS) := WatchedSeq /\ CTX := M x /\ y := ~(x)
        /\ CIS' := generateConflictInfoSetFromBackjump(CTX, CIS, l)
        /\ BI' :=  updateBerkminInfoForBackjumpingOneClause(CTX, WCS, CIS, ConflictClause, l, BI)
        by WatchedSeq using select-clauses(y, CIS', BI', NRestart) : WFail .

    sd fail-branch(l, BackjumpClause, ConflictClause, CIS, BI, NRestart) :=  
        (WBackjump1[l <- l, C <- BackjumpClause] or-else 
        WBackjump2[l <- l]) ? (WLearn[C <- BackjumpClause] ; 
        matchrew WatchedSeq s.t. (M x || WCS) := WatchedSeq /\ CTX := M x /\ y := ~(x)
        /\ CIS' := generateConflictInfoSetFromBackjump(CTX, CIS, BackjumpClause)
        /\ BI' :=  updateBerkminInfoForBackjumping(CTX, WCS, CIS, ConflictClause, BackjumpClause, BI)
        by WatchedSeq using decide-if-restart(y, CIS', BI', NRestart)) : WFail .

    sd generate-failure-info(CIS, ConflictClause, BI, NRestart) := matchrew WatchedSeq s.t. (M || WCS) := WatchedSeq 
        /\ CIS' :=  obtainCurrentConflictInfoSet(M, CIS)
        /\ BackjumpClause :=  obtainBackjumpClause(CIS', ConflictClause) /\ 
        l := obtainNegatedUIP(CIS', BackjumpClause)  
        by WatchedSeq using (fail-branch(l, BackjumpClause, ConflictClause, CIS, BI, NRestart)) .
  
    sd propagate(l CTX, CIS, emptyCS, BI, NRestart) := select-clauses(CTX, CIS, BI, NRestart) .

    sd propagate(l CTX, CIS, (C, CS), BI, NRestart) := 
        (matchrew WatchedSeq s.t. M || WCS, (l \/ x) : C , WCS' := WatchedSeq /\  l in M = false /\
        x in M = false /\ WC' := (l \/ x) : C /\ WC := changeRepresentative(M, l, WC') /\ 
        CIS' := (CIS x -> C) /\ y := ~(x) 
        by WatchedSeq using
        ((WUpdateClause[C <- C, WC <- WC] ; propagate(l CTX, CIS, CS, BI, NRestart)) or-else 
        (WUnitPropagate[x <- x] ; propagate(l CTX y, CIS', CS, BI, NRestart)) or-else 
        generate-failure-info(CIS, C, BI, NRestart) )) 
        or-else propagate(l CTX, CIS, CS, BI, NRestart) . 

    sd select-clauses(emptyCTX, CIS, BI, NRestart) := decide-literal(CIS, BI, NRestart) .

    sd select-clauses(l CTX, CIS, BI, NRestart) := (matchrew WatchedSeq s.t. 
        M || WCS := WatchedSeq /\ CS := obtainCandidateClauses(l, WCS) 
        by WatchedSeq using propagate(l CTX, CIS, CS, BI, NRestart)) .
        
    sd decide-literal(CIS, BI, NRestart) := matchrew WatchedSeq s.t. (M || WCS) := WatchedSeq
        /\ BI' := changeCurrentTopClauseForDecision(M, WCS, BI)
        /\ BI' =/= failUpdateBerkminInfo
        /\ l := chooseNextDecisionLiteral(M, BI') 
        by WatchedSeq using (WDecide[l <- l] ; success-decision(CIS, BI', NRestart)) or-else idle .

    sd success-decision(CIS, BI, NRestart) := matchrew WatchedSeq s.t. (M d(l) || WCS) := WatchedSeq /\ CIS' := (CIS l -> []) 
        /\ x := ~(l) by WatchedSeq using (select-clauses(x, CIS', BI, NRestart)) .

    sd convert-watch-literal(BI) := PreprocessClauseSet ; decide-literal(emptyCIS, BI, 1) .

    sd berkmin-strat := WPureLiteral ! ; matchrew BasicSeq s.t. (M || CS) := BasicSeq /\ 
        BI := initializeBerkmin(CS)
        by BasicSeq using convert-watch-literal(BI) .
     
endsm