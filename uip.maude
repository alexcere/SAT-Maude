sload logic.maude

*** Functional module which contains definitions needed
*** to produce a conflictive clause from info regarding last
*** time a decision was made

fmod UNIQUE-IMPLICATION-POINT is protecting LOGIC .

     *** We define new sorts for storing the info
     *** we need in order to produce the UIP.
     *** This info is a list of pairs that stores
     *** those literals that were propagated after taking the last decision,
     *** and the clause that produced that propagation.
     
     sorts ConflictInfo ConflictInfoSet .
     subsort ConflictInfo < ConflictInfoSet .

     op emptyCIS : -> ConflictInfoSet .

     op _->_ : Literal Clause -> ConflictInfo [ctor prec 22] .
     op __ : ConflictInfoSet ConflictInfoSet -> ConflictInfoSet [ctor assoc id: emptyCIS prec 30] .

     var CIS Cis : ConflictInfoSet .
     var l x y : Literal .
     var C C' D : Clause .
     var M N CTX : Context .

     *** In order to find the UIP, instead of storing the
     *** level each literal in the context was found, we just
     *** can count how many literals in a clause are in our conflict structure.
     
     op literalsInLevel : ConflictInfoSet Clause -> Nat .
     
     eq literalsInLevel(CIS (l -> C) Cis , l \/ D) = 1 + literalsInLevel(CIS Cis, D) .
     eq literalsInLevel(CIS (l -> C) Cis , ~(l) \/ D) = 1 + literalsInLevel(CIS Cis, D) .
     eq literalsInLevel(CIS (~(l) -> C) Cis , l \/ D) = 1 + literalsInLevel(CIS Cis, D) .
     eq literalsInLevel(CIS, C) = 0 [owise] . 


     *** The backjump clause is reached when we get a clause with only one literal is obtained
     *** from iteratively applying the binary resolution rule with clauses in
     *** reverse propagation order and the conflicting clause.

     op obtainBackjumpClause : ConflictInfoSet Clause -> Clause .
     
     ceq obtainBackjumpClause(CIS, C) = C if literalsInLevel(CIS,C) == 1 .
     ceq obtainBackjumpClause(CIS l -> (C \/ l) , ~(l) \/ D) = obtainBackjumpClause(CIS, C \/ D) 
       if literalsInLevel(CIS l -> (C \/ l), ~(l) \/ D) =/= 1 .
     ceq obtainBackjumpClause(CIS ~(l) -> (C \/ ~(l)), l \/ D) = obtainBackjumpClause(CIS, C \/ D) 
       if literalsInLevel(CIS ~(l) -> (C \/ ~(l)), l \/ D) =/= 1 .
     eq obtainBackjumpClause(CIS l -> C, D) = obtainBackjumpClause(CIS, D) [owise] .

     *** The UIP is the literal negated in the conflict clause that belongs
     *** to current level. Therefore, it can be found by finding a match
     *** with the ConflictInfoSet .
     
     op obtainNegatedUIP : ConflictInfoSet Clause -> Literal .

     eq obtainNegatedUIP(CIS (l -> C) Cis, ~(l) \/ D) = ~(l) .
     eq obtainNegatedUIP(CIS (~(l) -> C) Cis, l \/ D) = l .


     *** Obtain ConflictInfoSet corresponding to current level (i.e the beginning of
     *** the ConflictInfoSet corresponds to the last decision literal)
     op obtainCurrentConflictInfoSet : Context ConflictInfoSet -> ConflictInfoSet .

     ceq obtainCurrentConflictInfoSet(M d(l) N, CIS (l -> C) Cis) = (l -> C) Cis if existsDecisionLiteral(N) =/= true .


     *** When we perform a backjump, we retrieve ConflictInfoSet up to previous literal
     *** and add the information generated from the negated UIP
     op generateConflictInfoSetFromBackjump : Context ConflictInfoSet Clause -> ConflictInfoSet .

     *** Special case: if context if empty, this means we have restarted and no
     *** literal is found at level 0. Therefore, the corresponding CIS is the empty one. 
     eq generateConflictInfoSetFromBackjump(emptyCTX, CIS, C) = emptyCIS .
     eq generateConflictInfoSetFromBackjump(l, CIS, C) = l -> C . 
     eq generateConflictInfoSetFromBackjump(M x l, CIS (x -> C) Cis, C') = CIS (x -> C) (l -> C') .
     eq generateConflictInfoSetFromBackjump(M d(x) l, CIS (x -> C) Cis, C') = CIS (x -> C) (l -> C') .

endfm